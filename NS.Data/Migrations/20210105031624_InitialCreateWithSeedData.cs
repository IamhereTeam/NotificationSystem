using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace NS.Data.Migrations
{
    public partial class InitialCreateWithSeedData : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Departments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Departments", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Username = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PasswordHash = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    PasswordSalt = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    DepartmentId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Users_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notifications_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserSettings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    DisabledDepartments = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserSettings_Users_Id",
                        column: x => x.Id,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserNotifications",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    NotificationId = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "getdate()"),
                    WasRead = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserNotifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserNotifications_Notifications_NotificationId",
                        column: x => x.NotificationId,
                        principalTable: "Notifications",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserNotifications_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.InsertData(
                table: "Departments",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "HR" },
                    { 2, "Development" },
                    { 3, "DevOps" },
                    { 4, "Sales" },
                    { 5, "Management" }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "DepartmentId", "FirstName", "LastName", "PasswordHash", "PasswordSalt", "Username" },
                values: new object[,]
                {
                    { 1, 1, "Marilyn", "Monroe", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "marilyn" },
                    { 2, 1, "Abraham", "Lincoln", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "abraham" },
                    { 3, 2, "Nelson", "Mandela", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "nelson" },
                    { 4, 2, "John", "Kennedy", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "john" },
                    { 5, 2, "Martin", "Luther King", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "martin" },
                    { 6, 2, "Queen", "Elizabeth", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "queen" },
                    { 7, 2, "Winston", "Churchill", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "winston" },
                    { 8, 3, "Donald", "Trump", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "donald" },
                    { 9, 4, "Muhammad", "Ali", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "muhammad" },
                    { 10, 5, "Elon", "Musk", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "elon" },
                    { 11, 5, "Jeff", "Bezos", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "jeff" },
                    { 12, 5, "Bill", "Gates", new byte[] { 97, 127, 134, 9, 60, 192, 236, 120, 228, 127, 140, 151, 18, 101, 11, 46, 225, 9, 109, 124, 40, 88, 98, 221, 110, 199, 80, 12, 209, 52, 143, 102, 164, 224, 61, 172, 140, 86, 109, 116, 235, 165, 95, 111, 227, 173, 37, 120, 3, 231, 55, 102, 95, 193, 38, 81, 114, 135, 58, 109, 44, 162, 68, 42 }, new byte[] { 243, 202, 23, 184, 232, 158, 110, 116, 229, 20, 131, 107, 58, 134, 149, 185, 191, 250, 126, 159, 1, 205, 57, 215, 11, 103, 164, 36, 172, 99, 180, 47, 5, 101, 117, 84, 124, 209, 199, 88, 21, 204, 51, 42, 239, 242, 69, 66, 73, 20, 228, 252, 119, 192, 213, 244, 11, 162, 34, 17, 36, 178, 137, 60, 9, 239, 45, 22, 169, 25, 141, 55, 215, 41, 166, 122, 108, 129, 100, 95, 126, 160, 38, 230, 228, 163, 125, 12, 118, 179, 1, 10, 168, 108, 59, 162, 19, 57, 109, 115, 183, 210, 133, 68, 77, 161, 174, 104, 75, 240, 71, 166, 213, 213, 68, 18, 74, 110, 192, 51, 190, 134, 68, 247, 197, 130, 17, 159 }, "bill" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_UserId",
                table: "Notifications",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserNotifications_NotificationId",
                table: "UserNotifications",
                column: "NotificationId");

            migrationBuilder.CreateIndex(
                name: "IX_UserNotifications_UserId",
                table: "UserNotifications",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Users_DepartmentId",
                table: "Users",
                column: "DepartmentId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "UserNotifications");

            migrationBuilder.DropTable(
                name: "UserSettings");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Departments");
        }
    }
}
